<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- SQL Mapping -->
<mapper namespace="com.ai.admin.dao.UserMapper">
	<!-- 사용자관리 리스트 조회 -->
	<select id="selectUserList" parameterType="com.ai.admin.vo.UserSearchVo" resultType="com.ai.admin.vo.UserVo">
		SELECT CU.USER_ID
             , CU.FST_CRER_ID
			 , IFNULL((SELECT USER_NM FROM CU_USER WHERE USER_ID = CU.FST_CRER_ID), CU.FST_CRER_ID) AS FST_CRER_NM
			 <!-- , DATE_FORMAT(CU.FST_CRE_DTM, '%Y-%m-%d %h:%i') AS FST_CRE_DTM -->
			 , DATE_FORMAT(CU.FST_CRE_DTM, '%Y.%m.%d') AS FST_CRE_DTM
			 , CU.AUDIT_ID
			 , IFNULL((SELECT USER_NM FROM CU_USER WHERE USER_ID = CU.AUDIT_ID), CU.AUDIT_ID) AS AUDIT_NM
		     <!-- , DATE_FORMAT(CU.AUDIT_DTM, '%Y-%m-%d %h:%i') AS AUDIT_DTM -->
		     , DATE_FORMAT(CU.AUDIT_DTM, '%Y.%m.%d') AS AUDIT_DTM
			 , CU.USER_NM
             , CU.USER_SEX
             , F_GET_CODE_NAME('CU001', CU.USER_SEX) AS USER_SEX_NM
             , CU.USER_AUTH
             , F_GET_CODE_NAME('CU004', CU.USER_AUTH) AS USER_AUTH_NM
             , CU.USER_PW
             , CU.USER_GRADE
             , F_GET_CODE_NAME('CU002', CU.USER_GRADE) AS USER_GRADE_NM
             , CU.PHONE_NUM1
             , CU.PHONE_NUM2
             , CU.PHONE_NUM3
             , CU.ADDRESS
             , CU.BIRTH
             , CU.EMAIL
             , CU.JOB
             , CU.TEAM
             , CU.LEVEL
             , F_GET_CODE_NAME('CU003', CU.LEVEL) AS LEVEL_NM
		  FROM CU_USER CU
		 WHERE 1 = 1
		   <if test='@org.apache.commons.lang3.StringUtils@isNotEmpty(searchValue)'>
			   <if test='@org.apache.commons.lang3.StringUtils@equals(searchKey, "userId")'>
				   AND CU.USER_ID LIKE CONCAT('%', #{searchValue}, '%')
			   </if>
			   <if test='@org.apache.commons.lang3.StringUtils@equals(searchKey, "userNm")'>
				   AND CU.USER_NM LIKE CONCAT('%', #{searchValue}, '%')
			   </if>
		   </if>
		 ORDER BY CU.FST_CRER_ID DESC
	</select>

	<!-- 사용자관리 상세 조회 -->
	<select id="selectUserOne" parameterType="com.ai.admin.vo.UserVo" resultType="com.ai.admin.vo.UserVo">
		SELECT CU.USER_ID
             , CU.FST_CRER_ID
			 , IFNULL((SELECT USER_NM FROM CU_USER WHERE USER_ID = CU.FST_CRER_ID), CU.FST_CRER_ID) AS FST_CRER_NM
			 , DATE_FORMAT(CU.FST_CRE_DTM, '%Y-%m-%d %h:%i') AS FST_CRE_DTM
			 , CU.AUDIT_ID
			 , IFNULL((SELECT USER_NM FROM CU_USER WHERE USER_ID = CU.AUDIT_ID), CU.AUDIT_ID) AS AUDIT_NM
		     , DATE_FORMAT(CU.AUDIT_DTM, '%Y-%m-%d %h:%i') AS AUDIT_DTM
			 , CU.USER_NM
             , CU.USER_SEX
             , F_GET_CODE_NAME('CU001', CU.USER_SEX) AS USER_SEX_NM
             , CU.USER_AUTH
             , CU.USER_PW
             , CU.USER_GRADE
             , F_GET_CODE_NAME('CU002', CU.USER_GRADE) AS USER_GRADE_NM
             , CU.PHONE_NUM1
             , CU.PHONE_NUM2
             , CU.PHONE_NUM3
             , CU.ADDRESS
     		 , CU.BIRTH
             , CU.EMAIL
             , CU.JOB
             , CU.TEAM
             , CU.LEVEL
             , F_GET_CODE_NAME('CU003', CU.LEVEL) AS LEVEL_NM
		  FROM CU_USER CU
		 WHERE 1 = 1
		   AND CU.USER_ID = #{userId}
	</select>

	<!-- 사용자관리 수정 -->
	<update id="updateUser" parameterType="com.ai.admin.vo.UserVo">
		UPDATE CU_USER
		   SET USER_NM = #{userNm}
			 , USER_AUTH = #{userAuth}
			 , USER_GRADE = #{userGrade}
			 , PHONE_NUM1 = #{phoneNum1}
			 , PHONE_NUM2 = #{phoneNum2}
			 , PHONE_NUM3 = #{phoneNum3}
			 , ADDRESS = #{address}
			 , BIRTH = #{birth}
			 , EMAIL = #{email}
			 , JOB = #{job}
			 , TEAM = #{team}
			 , LEVEL = #{level}
			 , AUDIT_ID = #{ssLoginId}
			 , AUDIT_DTM = NOW()
		 WHERE 1 = 1
		   AND USER_ID = #{userId}
	</update>

	<!-- 사용자관리 비밀번호 수정 -->
	<update id="updatePassword" parameterType="com.ai.admin.vo.UserVo">
		UPDATE CU_USER
		   SET USER_PW = #{userPw}
			 , AUDIT_ID = #{ssLoginId}
			 , AUDIT_DTM = NOW()
		 WHERE 1 = 1
		   AND USER_ID = #{userId}
	</update>

	<!-- 사용자관리 분석정보 리스트 조회 -->
	<select id="selectAnalyzeInfoList" parameterType="com.ai.mypage.vo.AnalyzeInfoVo" resultType="com.ai.mypage.vo.AnalyzeInfoVo">
		SELECT USER_ID
			 , ANALYZE_INFO_ID
			 , CA.FST_CRER_ID
			 , IFNULL((SELECT USER_NM FROM CU_USER WHERE USER_ID = CA.FST_CRER_ID), CA.FST_CRER_ID) AS FST_CRER_NM
			 , DATE_FORMAT(FST_CRE_DTM, '%Y-%m-%d %h:%i') AS FST_CRE_DTM
			 , CA.AUDIT_ID
			 , IFNULL((SELECT USER_NM FROM CU_USER WHERE USER_ID = CA.AUDIT_ID), CA.AUDIT_ID) AS AUDIT_NM
			 , DATE_FORMAT(AUDIT_DTM, '%Y-%m-%d %h:%i') AS AUDIT_DTM
			 , BADUK_TENDENCY
			 , VICTORY_PATTERN
			 , BP
			 , IBM
			 , TARGET
			 , OPENING
			 , OPENING_STARTING
			 , OPENING_AI_MATCH_RATE
			 , OPENING_AI_GRAPH
			 , OPENING_MISS_RATE
			 , MIDDLE_GAME
			 , MIDDLE_GAME_COMBATIVE_POWER
			 , MIDDLE_GAME_SAVE_RATE
			 , MIDDLE_GAME_MISS_CNT
			 , MIDDLE_GAME_MISS_RATE
			 , END_GAME
			 , END_GAME_DEFENSE
			 , END_GAME_DEFENSE_FAILURE
			 , END_GAME_TURN_THE_TABLES
			 , END_GAME_MISS_CNT
			 , GAME_TIMING
			 , GAME_TIMING_WAVE
			 , GAME_TIMING_DEFENCE
			 , TECHNIQUE
			 , TECHNIQUE_VALUE_JUDGMENT
			 , TECHNIQUE_HAENGMA
			 , TECHNIQUE_READING
			 , EXAM_OPENING_POSITIONAL_JUDGMENT
			 , EXAM_HAENGMA_VALUE_JUDGMENT
			 , EXAM_READING_LIFE_AND_DEATH
			 , EXAM_END_GAME_COUNTING
			 , ETC
		  FROM CU_ANALYZE_INFO CA
	     WHERE USER_ID = #{userId}
	       AND ANALYZE_INFO_ID = #{analyzeInfoId}
	</select>

	<!-- 사용자관리 분석정보 등록 -->
	<insert id="mergeAnalyzeInfo" parameterType="com.ai.mypage.vo.AnalyzeInfoVo">
		INSERT INTO CU_ANALYZE_INFO (
			USER_ID
			, ANALYZE_INFO_ID
			, FST_CRER_ID
			, FST_CRE_DTM
			, AUDIT_ID
			, AUDIT_DTM
			, BADUK_TENDENCY
			, VICTORY_PATTERN
			, BP
			, IBM
			, TARGET
			, OPENING
			, OPENING_STARTING
			, OPENING_AI_MATCH_RATE
			, OPENING_AI_GRAPH
			, OPENING_MISS_RATE
			, MIDDLE_GAME
			, MIDDLE_GAME_COMBATIVE_POWER
			, MIDDLE_GAME_SAVE_RATE
			, MIDDLE_GAME_MISS_CNT
			, MIDDLE_GAME_MISS_RATE
			, END_GAME
			, END_GAME_DEFENSE
			, END_GAME_DEFENSE_FAILURE
			, END_GAME_TURN_THE_TABLES
			, END_GAME_MISS_CNT
			, GAME_TIMING
			, GAME_TIMING_WAVE
			, GAME_TIMING_DEFENCE
			, TECHNIQUE
			, TECHNIQUE_VALUE_JUDGMENT
			, TECHNIQUE_HAENGMA
			, TECHNIQUE_READING
			, EXAM_OPENING_POSITIONAL_JUDGMENT
			, EXAM_HAENGMA_VALUE_JUDGMENT
			, EXAM_READING_LIFE_AND_DEATH
			, EXAM_END_GAME_COUNTING
			, ETC
		)
		VALUES (
			#{userId}
			, #{analyzeInfoId}
			, #{ssLoginId}
			, NOW()
			, #{ssLoginId}
			, NOW()
			, #{badukTendency}
			, #{victoryPattern}
			, #{bp}
			, #{ibm}
			, #{target}
			, #{opening}
			, #{openingStarting}
			, #{openingAiMatchRate}
			, #{openingAiGraph}
			, #{openingMissRate}
			, #{middleGame}
			, #{middleGameCombativePower}
			, #{middleGameSaveRate}
			, #{middleGameMissCnt}
			, #{middleGameMissRate}
			, #{endGame}
			, #{endGameDefense}
			, #{endGameDefenseFailure}
			, #{endGameTurnTheTables}
			, #{endGameMissCnt}
			, #{gameTiming}
			, #{gameTimingWave}
			, #{gameTimingDefence}
			, #{technique}
			, #{techniqueValueJudgment}
			, #{techniqueHaengma}
			, #{techniqueReading}
			, #{examOpeningPositionalJudgment}
			, #{examHaengmaValueJudgment}
			, #{examReadingLifeAndDeath}
			, #{examEndGameCounting}
			, #{etc}
		)
		ON DUPLICATE KEY UPDATE
		USER_ID = #{userId}
		, ANALYZE_INFO_ID = #{analyzeInfoId}
		, AUDIT_ID = #{ssLoginId}
		, AUDIT_DTM = NOW()
		, BADUK_TENDENCY = #{badukTendency}
		, VICTORY_PATTERN = #{victoryPattern}
		, BP = #{bp}
		, IBM = #{ibm}
		, TARGET = #{target}
		, OPENING = #{opening}
		, OPENING_STARTING = #{openingStarting}
		, OPENING_AI_MATCH_RATE = #{openingAiMatchRate}
		, OPENING_AI_GRAPH = #{openingAiGraph}
		, OPENING_MISS_RATE = #{openingMissRate}
		, MIDDLE_GAME = #{middleGame}
		, MIDDLE_GAME_COMBATIVE_POWER = #{middleGameCombativePower}
		, MIDDLE_GAME_SAVE_RATE = #{middleGameSaveRate}
		, MIDDLE_GAME_MISS_CNT = #{middleGameMissCnt}
		, MIDDLE_GAME_MISS_RATE = #{middleGameMissRate}
		, END_GAME = #{endGame}
		, END_GAME_DEFENSE = #{endGameDefense}
		, END_GAME_DEFENSE_FAILURE = #{endGameDefenseFailure}
		, END_GAME_TURN_THE_TABLES = #{endGameTurnTheTables}
		, END_GAME_MISS_CNT = #{endGameMissCnt}
		, GAME_TIMING = #{gameTiming}
		, GAME_TIMING_WAVE = #{gameTimingWave}
		, GAME_TIMING_DEFENCE = #{gameTimingDefence}
		, TECHNIQUE = #{technique}
		, TECHNIQUE_VALUE_JUDGMENT = #{techniqueValueJudgment}
		, TECHNIQUE_HAENGMA = #{techniqueHaengma}
		, TECHNIQUE_READING = #{techniqueReading}
		, EXAM_OPENING_POSITIONAL_JUDGMENT = #{examOpeningPositionalJudgment}
		, EXAM_HAENGMA_VALUE_JUDGMENT = #{examHaengmaValueJudgment}
		, EXAM_READING_LIFE_AND_DEATH = #{examReadingLifeAndDeath}
		, EXAM_END_GAME_COUNTING = #{examEndGameCounting}
		, ETC = #{etc}
	</insert>

</mapper>